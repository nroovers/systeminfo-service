{
  "version": 3,
  "sources": ["../src/index.ts", "../src/app.ts", "../src/config/index.ts", "../src/routes/infoRoutes.ts", "../src/models/infoModel.ts", "../src/controllers/infoController.ts", "../src/middleware/transformResponseBody.ts", "../src/utils/AppError.ts", "../src/middleware/unknownEndpoint.ts", "../src/middleware/errorHandler.ts"],
  "sourcesContent": ["import http from \"http\";\r\nimport app from \"app\"; // the actual Express application\r\nimport config from \"config\";\r\n\r\nconst server = http.createServer(app);\r\n\r\nserver.listen(config.port, () => {\r\n  console.log(`Node_ENV: ${config.nodeEnv}`);\r\n  console.log(`Server running on port ${config.port}`);\r\n});\r\n", "import express from \"express\";\r\nimport cors from \"cors\";\r\nimport morgan from \"morgan\";\r\nimport config from \"config\";\r\nimport infoRouter from \"routes/infoRoutes\";\r\nimport transformResponseBody from \"middleware/transformResponseBody\";\r\nimport unknownEndpoint from \"middleware/unknownEndpoint\";\r\nimport errorHandler from \"middleware/errorHandler\";\r\n\r\nconst app = express();\r\n\r\n// parses incoming requests with JSON payloads and is based on body-parser.\r\n// app.use(express.json())\r\n\r\nconst path = `/${config.apiPref}/${config.apiVersion}`;\r\n\r\napp.use(cors()); // --> middleware to support CORS\r\napp.use(\r\n  morgan(\r\n    ':remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] :response-time ms'\r\n  )\r\n);\r\napp.use(transformResponseBody);\r\n\r\napp.use(path + \"/info\", infoRouter);\r\n\r\napp.get(\"/\", function (req, res) {\r\n  res.send(\"<h2>OK</h2><p>System info service up and running.<p>\");\r\n});\r\n\r\napp.use(unknownEndpoint);\r\napp.use(errorHandler);\r\n\r\nexport default app;\r\n", "import dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\ninterface Config {\r\n  port: number;\r\n  nodeEnv: string;\r\n  apiPref: string;\r\n  apiVersion: string;\r\n}\r\n\r\nconst config: Config = {\r\n  port: Number(process.env.PORT) || 3001,\r\n  nodeEnv: process.env.NODE_ENV || \"development\",\r\n  apiPref: process.env.API_PREF || \"api\",\r\n  apiVersion: process.env.API_VERSION || \"v1\",\r\n};\r\n\r\nexport default config;\r\n", "import { Router } from \"express\";\r\nimport { getInfo } from \"controllers/infoController\";\r\n\r\nconst infoRouter = Router();\r\n\r\ninfoRouter.get(\"/\", getInfo);\r\n\r\nexport default infoRouter;\r\n", "import config from \"config\";\r\nimport si from \"systeminformation\";\r\n\r\nconst cpu = () => {\r\n  return si.cpu();\r\n};\r\n\r\nconst cpuSpeed = async () => {\r\n  if (config.nodeEnv === \"production\") {\r\n    return si.cpuCurrentSpeed();\r\n  }\r\n  const speed = await si.cpuCurrentSpeed();\r\n  speed.avg = Math.round((Math.random() * 50 + 0) * 10) / 10;\r\n  // console.log('speed:', speed)\r\n  return speed;\r\n};\r\n\r\nconst cpuTemp = async () => {\r\n  if (config.nodeEnv === \"production\") {\r\n    return si.cpuTemperature();\r\n  }\r\n  const temp = await si.cpuTemperature();\r\n  temp.main = Math.round((Math.random() * 20 + 60) * 10) / 10;\r\n  // console.log('temp:', temp)\r\n  return temp;\r\n};\r\n\r\nconst cpuLoad = () => {\r\n  return si.currentLoad();\r\n};\r\n\r\nconst mem = () => {\r\n  return si.mem();\r\n};\r\n\r\nconst os = () => {\r\n  return si.osInfo();\r\n};\r\n\r\nconst load = () => {\r\n  return si.currentLoad();\r\n};\r\n\r\nconst processes = () => {\r\n  return si.processes();\r\n};\r\n\r\nconst disk = () => {\r\n  return si.diskLayout();\r\n};\r\n\r\nconst fsSize = () => {\r\n  return si.fsSize();\r\n};\r\n\r\nconst network = () => {\r\n  return si.networkInterfaces();\r\n};\r\n\r\nconst networkStats = () => {\r\n  return si.networkStats();\r\n};\r\n\r\nconst wifi = () => {\r\n  return si.wifiNetworks();\r\n};\r\n\r\nexport default {\r\n  cpu,\r\n  cpuSpeed,\r\n  cpuTemp,\r\n  cpuLoad,\r\n  mem,\r\n  os,\r\n  load,\r\n  processes,\r\n  disk,\r\n  fsSize,\r\n  network,\r\n  networkStats,\r\n  wifi,\r\n};\r\n\r\n// const info2 = {\r\n//     cpu: {\r\n//         speed: 70,\r\n//         temp: 60,\r\n//         avgLoad: 0.15,\r\n//         currentLoad: 0.15,\r\n//     },\r\n//     memory: {\r\n//         total: 100,\r\n//         free: 70,\r\n//         used: 30\r\n//     },\r\n//     // battery:{\r\n\r\n//     // },\r\n//     network: [\r\n//         {\r\n//             interface: 'eth0',\r\n//             ip4: '',\r\n//             ip4subnet: '',\r\n//             dhcp: '',\r\n//             mac: '',\r\n//         },\r\n//         {\r\n//             interface: 'wlan0',\r\n//             ip4: '',\r\n//             ip4subnet: '',\r\n//             dhcp: '',\r\n//             mac: '',\r\n//         }],\r\n//     processes: [\r\n//         {\r\n//             id: '\u00E1bc',\r\n//             name: 'proc1',\r\n//             cpu: 0.10,\r\n//             memory: 150,\r\n//             status: 'idle'\r\n//         },\r\n//         {\r\n//             id: 'xyz',\r\n//             name: 'proc2',\r\n//             cpu: 0.20,\r\n//             memory: 723,\r\n//             status: 'running'\r\n//         }\r\n//     ]\r\n// }\r\n", "// const infoRouter = require('express').Router()\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport info from \"models/infoModel\";\r\n\r\nconst getFlags = (flag) => {\r\n  // console.log('flags', flag)\r\n  if (Array.isArray(flag)) {\r\n    return flag;\r\n  }\r\n  if (flag) {\r\n    return [flag];\r\n  }\r\n  return Object.keys(info);\r\n};\r\n\r\nexport const getInfo = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // console.log('getInfo called')\r\n    const flags = getFlags(req.query.flag);\r\n    var data = {};\r\n    for (const f of flags) {\r\n      if (typeof info[f] !== \"function\") throw new Error(\"Invalid flag: \" + f);\r\n      data[f] = await info[f]();\r\n    }\r\n    res.json(data);\r\n  } catch (error) {\r\n    error.statusCode = 400;\r\n    return next(error);\r\n  }\r\n};\r\n", "import mung from \"express-mung\";\r\nimport { Request, Response } from \"express\";\r\n\r\n/* encapsulate the JSON response in a data object */\r\nconst transformResponseBody = (body: any, _: Request, __: Response) => {\r\n  return { data: body };\r\n};\r\n\r\nexport default mung.json(transformResponseBody);\r\n", "export default class AppError extends Error {\r\n  public readonly statusCode: number;\r\n\r\n  constructor(message: string, code: number = 500) {\r\n    super(message);\r\n\r\n    // Set the prototype explicitly \u2014 needed for `instanceof` to work correctly in TypeScript\r\n    Object.setPrototypeOf(this, AppError.prototype);\r\n\r\n    this.name = this.constructor.name;\r\n    this.statusCode = code;\r\n  }\r\n}\r\n", "import AppError from \"@utils/AppError\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nconst unknownEndpoint = (req: Request, _: Response, next: NextFunction) => {\r\n  const error = new AppError(`Page not found '${req.originalUrl}'`, 404);\r\n  next(error);\r\n};\r\n\r\nexport default unknownEndpoint;\r\n", "import AppError from \"@utils/AppError\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nconst errorHandler = (\r\n  err: AppError,\r\n  _: Request,\r\n  res: Response,\r\n  __: NextFunction\r\n) => {\r\n  res.status(err.statusCode).json({\r\n    error: {\r\n      code: err.statusCode,\r\n      message: err.message,\r\n      // error: err,\r\n      // stack: err.stack\r\n    },\r\n  });\r\n};\r\n\r\nexport default errorHandler;\r\n"],
  "mappings": "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",
  "names": ["import_http", "import_express", "import_cors", "import_morgan", "import_dotenv", "dotenv", "config", "config_default", "import_express", "import_systeminformation", "cpu", "si", "cpuSpeed", "config_default", "speed", "cpuTemp", "temp", "cpuLoad", "mem", "os", "load", "processes", "disk", "fsSize", "network", "networkStats", "wifi", "infoModel_default", "getFlags", "flag", "infoModel_default", "getInfo", "req", "res", "next", "flags", "data", "f", "error", "infoRouter", "getInfo", "infoRoutes_default", "import_express_mung", "transformResponseBody", "body", "_", "__", "transformResponseBody_default", "mung", "AppError", "_AppError", "message", "code", "unknownEndpoint", "req", "_", "next", "error", "AppError", "unknownEndpoint_default", "errorHandler", "err", "_", "res", "__", "errorHandler_default", "app", "express", "path", "config_default", "cors", "morgan", "transformResponseBody_default", "infoRoutes_default", "req", "res", "unknownEndpoint_default", "errorHandler_default", "app_default", "server", "http", "app_default", "config_default"]
}
